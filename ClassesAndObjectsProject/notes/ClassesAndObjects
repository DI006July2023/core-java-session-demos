Things that we saw before entering into Object Oriented programming
----------------------------------------------------------------------------
hello world program
primitive data types - 8 data types
operators
flow constructs
	- if
	- switch case
loops
	- do...while
	- while loop
	- for loop
arrays
String
methods

In Object Oriented Programing
----------------------------
class contains
--------------
variables
	- attributes/data members/state/properties
methods
	- functions/members/behaviour 

example:
--------
class Person{
	int name;
	int height;
	String gender;
	
	boolean talk(){....}
	boolean listen(){...}
	boolean write(){.....}
}


a class can also have 
----------------------
static blocks
inner class

getters/setters
constructors
toString
equals
hashcode

The room naration
-----------------
Dimensions
Room

computePaintingCostOfWalls
computeFloorArea

what is a constructor?
----------------------
- a special method
	- has the same name as the class
	- it is called automatically whenever an object is created, 
			you cannot call a constructor explicitly like how you call other methods 
	- does not return anything, not even void
	
when you create a class and do not provide a constructor, 
	- the compiler will automatically provide a constructor
	- and this is called default constructor
	- the moment you provide a constructor in your class the default constructor is lost

we can overload constructors - multiple constructors in a class with different parameters
we can call one constructor from another constructor using this() and this is called constructor chaining

Polymorphism
------------

- method overloading
	- same method name but different arguments
	- different arguments mean 
		- no of arguments 
		- type of arguments
		- order of arguments
	- we do not consider the return type in method overloading
	
class Shape{

	int area(int side){
		return (side * side);
	}
	
	void area(int length, int breadth){
		int area = length * breadth;
	}
}


int a = 10;
System.out.println(a);

String name = "John";
System.out.println(name);


- method overriding


static polymorphism - compile time polymorphism
	- method overloading
dynamic polymophism - runtime polymorphism
	- method overiding


